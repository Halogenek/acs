
USBPDprogrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b34  08002b34  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002b34  08002b34  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b34  08002b34  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000034  08002b70  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002b70  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000797c  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001408  00000000  00000000  000279d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  00028de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  000296a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012f99  00000000  00000000  00029ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c30  00000000  00000000  0003ce59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068baa  00000000  00000000  00043a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002364  00000000  00000000  000ac6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002af0 	.word	0x08002af0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002af0 	.word	0x08002af0

0800014c <CUST_EnterWriteMode>:
#include "USBPD.h"
#include "USBPD_NVM.h"

uint8_t CUST_EnterWriteMode(uint8_t DevAddr,unsigned char ErasedSector)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	unsigned char Buffer[10];

	/* Set Password*/
	Buffer[0] = USBPD_FTP_CUST_PASSWORD;
 800015c:	2347      	movs	r3, #71	; 0x47
 800015e:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CUST_PASSWORD_REG,Buffer,1) != HAL_OK ) return 1;
 8000160:	f107 020c 	add.w	r2, r7, #12
 8000164:	79f8      	ldrb	r0, [r7, #7]
 8000166:	2301      	movs	r3, #1
 8000168:	2195      	movs	r1, #149	; 0x95
 800016a:	f000 f9e1 	bl	8000530 <I2C_Write_USB_PD>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d001      	beq.n	8000178 <CUST_EnterWriteMode+0x2c>
 8000174:	2301      	movs	r3, #1
 8000176:	e0c5      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* this register must be NULL for Partial Erase feature */
	Buffer[0] = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_RW_BUFFER,Buffer,1) != HAL_OK ) return 1;
 800017c:	f107 020c 	add.w	r2, r7, #12
 8000180:	79f8      	ldrb	r0, [r7, #7]
 8000182:	2301      	movs	r3, #1
 8000184:	2153      	movs	r1, #83	; 0x53
 8000186:	f000 f9d3 	bl	8000530 <I2C_Write_USB_PD>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d001      	beq.n	8000194 <CUST_EnterWriteMode+0x48>
 8000190:	2301      	movs	r3, #1
 8000192:	e0b7      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Set RST_N bit */
	Buffer[0] = USBPD_FTP_CUST_RST_N ;
 8000194:	2340      	movs	r3, #64	; 0x40
 8000196:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 8000198:	f107 020c 	add.w	r2, r7, #12
 800019c:	79f8      	ldrb	r0, [r7, #7]
 800019e:	2301      	movs	r3, #1
 80001a0:	2196      	movs	r1, #150	; 0x96
 80001a2:	f000 f9c5 	bl	8000530 <I2C_Write_USB_PD>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <CUST_EnterWriteMode+0x64>
 80001ac:	2301      	movs	r3, #1
 80001ae:	e0a9      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Reset NVM */
	Buffer[0] = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 80001b4:	f107 020c 	add.w	r2, r7, #12
 80001b8:	79f8      	ldrb	r0, [r7, #7]
 80001ba:	2301      	movs	r3, #1
 80001bc:	2196      	movs	r1, #150	; 0x96
 80001be:	f000 f9b7 	bl	8000530 <I2C_Write_USB_PD>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <CUST_EnterWriteMode+0x80>
 80001c8:	2301      	movs	r3, #1
 80001ca:	e09b      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Set RST_N bit */
	Buffer[0] = USBPD_FTP_CUST_RST_N;
 80001cc:	2340      	movs	r3, #64	; 0x40
 80001ce:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 80001d0:	f107 020c 	add.w	r2, r7, #12
 80001d4:	79f8      	ldrb	r0, [r7, #7]
 80001d6:	2301      	movs	r3, #1
 80001d8:	2196      	movs	r1, #150	; 0x96
 80001da:	f000 f9a9 	bl	8000530 <I2C_Write_USB_PD>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <CUST_EnterWriteMode+0x9c>
 80001e4:	2301      	movs	r3, #1
 80001e6:	e08d      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Load 0xF1 to FTP_CUST_SER to erase all sectors of FTP and Set Write SER Opcode */
	Buffer[0] = ((ErasedSector << 3) & USBPD_FTP_CUST_SER) | ( USBPD_WRITE_SER & USBPD_FTP_CUST_OPCODE);
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	b25b      	sxtb	r3, r3
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	b25b      	sxtb	r3, r3
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_1,Buffer,1) != HAL_OK ) return 1;
 80001f8:	f107 020c 	add.w	r2, r7, #12
 80001fc:	79f8      	ldrb	r0, [r7, #7]
 80001fe:	2301      	movs	r3, #1
 8000200:	2197      	movs	r1, #151	; 0x97
 8000202:	f000 f995 	bl	8000530 <I2C_Write_USB_PD>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <CUST_EnterWriteMode+0xc4>
 800020c:	2301      	movs	r3, #1
 800020e:	e079      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Load Write SER Opcode */
	Buffer[0] = USBPD_FTP_CUST_RST_N | USBPD_FTP_CUST_REQ ;
 8000210:	2350      	movs	r3, #80	; 0x50
 8000212:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 8000214:	f107 020c 	add.w	r2, r7, #12
 8000218:	79f8      	ldrb	r0, [r7, #7]
 800021a:	2301      	movs	r3, #1
 800021c:	2196      	movs	r1, #150	; 0x96
 800021e:	f000 f987 	bl	8000530 <I2C_Write_USB_PD>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <CUST_EnterWriteMode+0xe0>
 8000228:	2301      	movs	r3, #1
 800022a:	e06b      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Wait for execution */
	do {
		if ( I2C_Read_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 800022c:	f107 020c 	add.w	r2, r7, #12
 8000230:	79f8      	ldrb	r0, [r7, #7]
 8000232:	2301      	movs	r3, #1
 8000234:	2196      	movs	r1, #150	; 0x96
 8000236:	f000 f99d 	bl	8000574 <I2C_Read_USB_PD>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <CUST_EnterWriteMode+0xf8>
 8000240:	2301      	movs	r3, #1
 8000242:	e05f      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>
	} while(Buffer[0] & USBPD_FTP_CUST_REQ);
 8000244:	7b3b      	ldrb	r3, [r7, #12]
 8000246:	f003 0310 	and.w	r3, r3, #16
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1ee      	bne.n	800022c <CUST_EnterWriteMode+0xe0>

	/* Set Soft Prog Opcode */
	Buffer[0] = USBPD_SOFT_PROG_SECTOR & USBPD_FTP_CUST_OPCODE ;
 800024e:	2307      	movs	r3, #7
 8000250:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_1,Buffer,1) != HAL_OK ) return 1;
 8000252:	f107 020c 	add.w	r2, r7, #12
 8000256:	79f8      	ldrb	r0, [r7, #7]
 8000258:	2301      	movs	r3, #1
 800025a:	2197      	movs	r1, #151	; 0x97
 800025c:	f000 f968 	bl	8000530 <I2C_Write_USB_PD>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <CUST_EnterWriteMode+0x11e>
 8000266:	2301      	movs	r3, #1
 8000268:	e04c      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Load Soft Prog Opcode */
	Buffer[0] = USBPD_FTP_CUST_RST_N | USBPD_FTP_CUST_REQ ;
 800026a:	2350      	movs	r3, #80	; 0x50
 800026c:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 800026e:	f107 020c 	add.w	r2, r7, #12
 8000272:	79f8      	ldrb	r0, [r7, #7]
 8000274:	2301      	movs	r3, #1
 8000276:	2196      	movs	r1, #150	; 0x96
 8000278:	f000 f95a 	bl	8000530 <I2C_Write_USB_PD>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <CUST_EnterWriteMode+0x13a>
 8000282:	2301      	movs	r3, #1
 8000284:	e03e      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>
	/* Wait for execution */
	do {
		if ( I2C_Read_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 8000286:	f107 020c 	add.w	r2, r7, #12
 800028a:	79f8      	ldrb	r0, [r7, #7]
 800028c:	2301      	movs	r3, #1
 800028e:	2196      	movs	r1, #150	; 0x96
 8000290:	f000 f970 	bl	8000574 <I2C_Read_USB_PD>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <CUST_EnterWriteMode+0x152>
 800029a:	2301      	movs	r3, #1
 800029c:	e032      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>
	} while(Buffer[0] & USBPD_FTP_CUST_REQ);
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	f003 0310 	and.w	r3, r3, #16
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1ee      	bne.n	8000286 <CUST_EnterWriteMode+0x13a>

	/* Set Erase Sectors Opcode */
	Buffer[0] = USBPD_ERASE_SECTOR & USBPD_FTP_CUST_OPCODE ;
 80002a8:	2305      	movs	r3, #5
 80002aa:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_1,Buffer,1) != HAL_OK ) return 1;
 80002ac:	f107 020c 	add.w	r2, r7, #12
 80002b0:	79f8      	ldrb	r0, [r7, #7]
 80002b2:	2301      	movs	r3, #1
 80002b4:	2197      	movs	r1, #151	; 0x97
 80002b6:	f000 f93b 	bl	8000530 <I2C_Write_USB_PD>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <CUST_EnterWriteMode+0x178>
 80002c0:	2301      	movs	r3, #1
 80002c2:	e01f      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>

	/* Load Erase Sectors Opcode */
	Buffer[0] = USBPD_FTP_CUST_RST_N | USBPD_FTP_CUST_REQ ;
 80002c4:	2350      	movs	r3, #80	; 0x50
 80002c6:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 80002c8:	f107 020c 	add.w	r2, r7, #12
 80002cc:	79f8      	ldrb	r0, [r7, #7]
 80002ce:	2301      	movs	r3, #1
 80002d0:	2196      	movs	r1, #150	; 0x96
 80002d2:	f000 f92d 	bl	8000530 <I2C_Write_USB_PD>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <CUST_EnterWriteMode+0x194>
 80002dc:	2301      	movs	r3, #1
 80002de:	e011      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>
	/* Wait for execution */
	do {
		if ( I2C_Read_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 80002e0:	f107 020c 	add.w	r2, r7, #12
 80002e4:	79f8      	ldrb	r0, [r7, #7]
 80002e6:	2301      	movs	r3, #1
 80002e8:	2196      	movs	r1, #150	; 0x96
 80002ea:	f000 f943 	bl	8000574 <I2C_Read_USB_PD>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <CUST_EnterWriteMode+0x1ac>
 80002f4:	2301      	movs	r3, #1
 80002f6:	e005      	b.n	8000304 <CUST_EnterWriteMode+0x1b8>
	} while(Buffer[0] & USBPD_FTP_CUST_REQ);
 80002f8:	7b3b      	ldrb	r3, [r7, #12]
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d1ee      	bne.n	80002e0 <CUST_EnterWriteMode+0x194>
	return 0;
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <CUST_WriteSector>:

uint8_t CUST_WriteSector(uint8_t DevAddr,char SectorNum, unsigned char *SectorData)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	603a      	str	r2, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	460b      	mov	r3, r1
 800031a:	71bb      	strb	r3, [r7, #6]
	unsigned char Buffer[10];

	/* Write Sectors Data in RW-BUFFER @ 0x53 */
	I2C_Write_USB_PD(DevAddr,USBPD_RW_BUFFER,SectorData,8);
 800031c:	79f8      	ldrb	r0, [r7, #7]
 800031e:	2308      	movs	r3, #8
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	2153      	movs	r1, #83	; 0x53
 8000324:	f000 f904 	bl	8000530 <I2C_Write_USB_PD>

	/*Set Write to PL Opcode*/
	Buffer[0]= (USBPD_WRITE_PL & USBPD_FTP_CUST_OPCODE);
 8000328:	2301      	movs	r3, #1
 800032a:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_1,Buffer,1) != HAL_OK ) return 1;
 800032c:	f107 020c 	add.w	r2, r7, #12
 8000330:	79f8      	ldrb	r0, [r7, #7]
 8000332:	2301      	movs	r3, #1
 8000334:	2197      	movs	r1, #151	; 0x97
 8000336:	f000 f8fb 	bl	8000530 <I2C_Write_USB_PD>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <CUST_WriteSector+0x38>
 8000340:	2301      	movs	r3, #1
 8000342:	e054      	b.n	80003ee <CUST_WriteSector+0xe2>

	/* Load Write to PL Sectors Opcode */
	Buffer[0]= USBPD_FTP_CUST_RST_N | USBPD_FTP_CUST_REQ;
 8000344:	2350      	movs	r3, #80	; 0x50
 8000346:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 8000348:	f107 020c 	add.w	r2, r7, #12
 800034c:	79f8      	ldrb	r0, [r7, #7]
 800034e:	2301      	movs	r3, #1
 8000350:	2196      	movs	r1, #150	; 0x96
 8000352:	f000 f8ed 	bl	8000530 <I2C_Write_USB_PD>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <CUST_WriteSector+0x54>
 800035c:	2301      	movs	r3, #1
 800035e:	e046      	b.n	80003ee <CUST_WriteSector+0xe2>

	/* Wait for execution */
	do {
		if ( I2C_Read_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 8000360:	f107 020c 	add.w	r2, r7, #12
 8000364:	79f8      	ldrb	r0, [r7, #7]
 8000366:	2301      	movs	r3, #1
 8000368:	2196      	movs	r1, #150	; 0x96
 800036a:	f000 f903 	bl	8000574 <I2C_Read_USB_PD>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <CUST_WriteSector+0x6c>
 8000374:	2301      	movs	r3, #1
 8000376:	e03a      	b.n	80003ee <CUST_WriteSector+0xe2>
	} while(Buffer[0] & USBPD_FTP_CUST_REQ);
 8000378:	7b3b      	ldrb	r3, [r7, #12]
 800037a:	f003 0310 	and.w	r3, r3, #16
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1ee      	bne.n	8000360 <CUST_WriteSector+0x54>

	/*Set Prog Sectors Opcode*/
	Buffer[0]= (USBPD_PROG_SECTOR & USBPD_FTP_CUST_OPCODE);
 8000382:	2306      	movs	r3, #6
 8000384:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_1,Buffer,1) != HAL_OK ) return 1;
 8000386:	f107 020c 	add.w	r2, r7, #12
 800038a:	79f8      	ldrb	r0, [r7, #7]
 800038c:	2301      	movs	r3, #1
 800038e:	2197      	movs	r1, #151	; 0x97
 8000390:	f000 f8ce 	bl	8000530 <I2C_Write_USB_PD>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <CUST_WriteSector+0x92>
 800039a:	2301      	movs	r3, #1
 800039c:	e027      	b.n	80003ee <CUST_WriteSector+0xe2>

	/* Load Prog Sectors Opcode */
	Buffer[0]=(SectorNum & USBPD_FTP_CUST_SECT) | USBPD_FTP_CUST_RST_N | USBPD_FTP_CUST_REQ;
 800039e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	b25b      	sxtb	r3, r3
 80003a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80003ac:	b25b      	sxtb	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 80003b2:	f107 020c 	add.w	r2, r7, #12
 80003b6:	79f8      	ldrb	r0, [r7, #7]
 80003b8:	2301      	movs	r3, #1
 80003ba:	2196      	movs	r1, #150	; 0x96
 80003bc:	f000 f8b8 	bl	8000530 <I2C_Write_USB_PD>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <CUST_WriteSector+0xbe>
 80003c6:	2301      	movs	r3, #1
 80003c8:	e011      	b.n	80003ee <CUST_WriteSector+0xe2>

	/* Wait for execution */
	do {
		if ( I2C_Read_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,1) != HAL_OK ) return 1;
 80003ca:	f107 020c 	add.w	r2, r7, #12
 80003ce:	79f8      	ldrb	r0, [r7, #7]
 80003d0:	2301      	movs	r3, #1
 80003d2:	2196      	movs	r1, #150	; 0x96
 80003d4:	f000 f8ce 	bl	8000574 <I2C_Read_USB_PD>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <CUST_WriteSector+0xd6>
 80003de:	2301      	movs	r3, #1
 80003e0:	e005      	b.n	80003ee <CUST_WriteSector+0xe2>
	} while(Buffer[0] & USBPD_FTP_CUST_REQ) ;
 80003e2:	7b3b      	ldrb	r3, [r7, #12]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d1ee      	bne.n	80003ca <CUST_WriteSector+0xbe>
	return 0;
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <CUST_ExitTestMode>:

uint8_t CUST_ExitTestMode(uint8_t DevAddr)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer[10];

	/* clear registers */
	Buffer[0] = USBPD_FTP_CUST_RST_N; Buffer[1]=0x00;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	733b      	strb	r3, [r7, #12]
 8000404:	2300      	movs	r3, #0
 8000406:	737b      	strb	r3, [r7, #13]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CTRL_0,Buffer,2) != HAL_OK ) return 1;
 8000408:	f107 020c 	add.w	r2, r7, #12
 800040c:	79f8      	ldrb	r0, [r7, #7]
 800040e:	2302      	movs	r3, #2
 8000410:	2196      	movs	r1, #150	; 0x96
 8000412:	f000 f88d 	bl	8000530 <I2C_Write_USB_PD>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <CUST_ExitTestMode+0x2a>
 800041c:	2301      	movs	r3, #1
 800041e:	e00e      	b.n	800043e <CUST_ExitTestMode+0x48>

	/* Clear Password */
	Buffer[0] = 0x00;
 8000420:	2300      	movs	r3, #0
 8000422:	733b      	strb	r3, [r7, #12]
	if ( I2C_Write_USB_PD(DevAddr,USBPD_FTP_CUST_PASSWORD_REG,Buffer,1) != HAL_OK ) return 1;
 8000424:	f107 020c 	add.w	r2, r7, #12
 8000428:	79f8      	ldrb	r0, [r7, #7]
 800042a:	2301      	movs	r3, #1
 800042c:	2195      	movs	r1, #149	; 0x95
 800042e:	f000 f87f 	bl	8000530 <I2C_Write_USB_PD>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <CUST_ExitTestMode+0x46>
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <CUST_ExitTestMode+0x48>

	return 0 ;
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <nvm_flash>:

uint8_t nvm_flash(uint8_t DevAddr)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
	if (CUST_EnterWriteMode(DevAddr, USBPD_SECTOR_0 |USBPD_SECTOR_1 |USBPD_SECTOR_2 |USBPD_SECTOR_3 | USBPD_SECTOR_4 ) != 0 ) return 1;
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	211f      	movs	r1, #31
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fe78 	bl	800014c <CUST_EnterWriteMode>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <nvm_flash+0x1e>
 8000462:	2301      	movs	r3, #1
 8000464:	e040      	b.n	80004e8 <nvm_flash+0xa0>

	if (CUST_WriteSector(DevAddr, 0, Sector0) != 0) return 1;
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <nvm_flash+0xa8>)
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff4d 	bl	800030c <CUST_WriteSector>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <nvm_flash+0x34>
 8000478:	2301      	movs	r3, #1
 800047a:	e035      	b.n	80004e8 <nvm_flash+0xa0>
	if (CUST_WriteSector(DevAddr, 1, Sector1) != 0) return 1;
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <nvm_flash+0xac>)
 8000480:	2101      	movs	r1, #1
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff42 	bl	800030c <CUST_WriteSector>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <nvm_flash+0x4a>
 800048e:	2301      	movs	r3, #1
 8000490:	e02a      	b.n	80004e8 <nvm_flash+0xa0>
	if (CUST_WriteSector(DevAddr, 2, Sector2) != 0) return 1;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4a18      	ldr	r2, [pc, #96]	; (80004f8 <nvm_flash+0xb0>)
 8000496:	2102      	movs	r1, #2
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff37 	bl	800030c <CUST_WriteSector>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <nvm_flash+0x60>
 80004a4:	2301      	movs	r3, #1
 80004a6:	e01f      	b.n	80004e8 <nvm_flash+0xa0>
	if (CUST_WriteSector(DevAddr, 3, Sector3) != 0) return 1;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <nvm_flash+0xb4>)
 80004ac:	2103      	movs	r1, #3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff2c 	bl	800030c <CUST_WriteSector>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <nvm_flash+0x76>
 80004ba:	2301      	movs	r3, #1
 80004bc:	e014      	b.n	80004e8 <nvm_flash+0xa0>
	if (CUST_WriteSector(DevAddr, 4, Sector4) != 0) return 1;
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <nvm_flash+0xb8>)
 80004c2:	2104      	movs	r1, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff21 	bl	800030c <CUST_WriteSector>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <nvm_flash+0x8c>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e009      	b.n	80004e8 <nvm_flash+0xa0>

	if (CUST_ExitTestMode(DevAddr) != 0 ) return 1;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff8d 	bl	80003f6 <CUST_ExitTestMode>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <nvm_flash+0x9e>
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <nvm_flash+0xa0>

	return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000010 	.word	0x20000010
 80004fc:	20000018 	.word	0x20000018
 8000500:	20000020 	.word	0x20000020

08000504 <LED_OK_Flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED_OK_Flash(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2120      	movs	r1, #32
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <LED_OK_Flash+0x28>)
 800050e:	f000 fdb7 	bl	8001080 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f000 fb2a 	bl	8000b6c <HAL_Delay>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2120      	movs	r1, #32
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <LED_OK_Flash+0x28>)
 800051e:	f000 fdaf 	bl	8001080 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000522:	20c8      	movs	r0, #200	; 0xc8
 8000524:	f000 fb22 	bl	8000b6c <HAL_Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010800 	.word	0x40010800

08000530 <I2C_Write_USB_PD>:

HAL_StatusTypeDef I2C_Write_USB_PD(uint8_t DevAddr, uint16_t Address ,uint8_t *DataW ,uint16_t Length)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af04      	add	r7, sp, #16
 8000536:	60ba      	str	r2, [r7, #8]
 8000538:	461a      	mov	r2, r3
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	460b      	mov	r3, r1
 8000540:	81bb      	strh	r3, [r7, #12]
 8000542:	4613      	mov	r3, r2
 8000544:	80fb      	strh	r3, [r7, #6]
	return  HAL_I2C_Mem_Write(&hi2c1,(DevAddr<<1), Address, USBPD_ADDR_SIZE, DataW, Length, 2000); // unmask all alarm status
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	b29b      	uxth	r3, r3
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	b299      	uxth	r1, r3
 800054e:	89ba      	ldrh	r2, [r7, #12]
 8000550:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <I2C_Write_USB_PD+0x40>)
 8000562:	f000 feef 	bl	8001344 <HAL_I2C_Mem_Write>
 8000566:	4603      	mov	r3, r0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000050 	.word	0x20000050

08000574 <I2C_Read_USB_PD>:

HAL_StatusTypeDef I2C_Read_USB_PD(uint8_t DevAddr, uint16_t Address ,uint8_t *DataR ,uint16_t Length)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af04      	add	r7, sp, #16
 800057a:	60ba      	str	r2, [r7, #8]
 800057c:	461a      	mov	r2, r3
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	460b      	mov	r3, r1
 8000584:	81bb      	strh	r3, [r7, #12]
 8000586:	4613      	mov	r3, r2
 8000588:	80fb      	strh	r3, [r7, #6]
	return  HAL_I2C_Mem_Read(&hi2c1,(DevAddr<<1), Address, USBPD_ADDR_SIZE, DataR, Length ,2000);
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	b29b      	uxth	r3, r3
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b299      	uxth	r1, r3
 8000592:	89ba      	ldrh	r2, [r7, #12]
 8000594:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <I2C_Read_USB_PD+0x40>)
 80005a6:	f000 ffc7 	bl	8001538 <HAL_I2C_Mem_Read>
 80005aa:	4603      	mov	r3, r0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000050 	.word	0x20000050

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fa74 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f819 	bl	80005f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8b0 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f884 	bl	80006d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005cc:	f000 f854 	bl	8000678 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED_OK_Flash();
 80005d0:	f7ff ff98 	bl	8000504 <LED_OK_Flash>
  if (nvm_flash(USBPD_ADDR_0) == 0) LED_OK_Flash();
 80005d4:	2028      	movs	r0, #40	; 0x28
 80005d6:	f7ff ff37 	bl	8000448 <nvm_flash>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <main+0x2c>
 80005e0:	f7ff ff90 	bl	8000504 <LED_OK_Flash>
  if (nvm_flash(USBPD_ADDR_1) == 0) LED_OK_Flash();
 80005e4:	202a      	movs	r0, #42	; 0x2a
 80005e6:	f7ff ff2f 	bl	8000448 <nvm_flash>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d101      	bne.n	80005f4 <main+0x3c>
 80005f0:	f7ff ff88 	bl	8000504 <LED_OK_Flash>

  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x3c>

080005f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b090      	sub	sp, #64	; 0x40
 80005fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2228      	movs	r2, #40	; 0x28
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fa6b 	bl	8002ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800062c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000630:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fcea 	bl	8002010 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000642:	f000 f8df 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f001 ff55 	bl	8002510 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800066c:	f000 f8ca 	bl	8000804 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3740      	adds	r7, #64	; 0x40
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f000 fd1d 	bl	80010f4 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f8a0 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000050 	.word	0x20000050
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f002 f89c 	bl	8002848 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f875 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000a4 	.word	0x200000a4
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0xcc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xcc>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xcc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_GPIO_Init+0xcc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xcc>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <MX_GPIO_Init+0xcc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_GPIO_Init+0xcc>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xcc>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xcc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xcc>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a1a      	ldr	r2, [pc, #104]	; (80007f4 <MX_GPIO_Init+0xcc>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xcc>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <MX_GPIO_Init+0xd0>)
 80007a2:	f000 fc6d 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_GPIO_Init+0xd4>)
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_GPIO_Init+0xd8>)
 80007bc:	f000 fb06 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_GPIO_Init+0xd0>)
 80007d8:	f000 faf8 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	; 0x28
 80007e2:	f000 fabc 	bl	8000d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f000 fad5 	bl	8000d96 <HAL_NVIC_EnableIRQ>

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	10110000 	.word	0x10110000
 8000800:	40011000 	.word	0x40011000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_MspInit+0x5c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_MspInit+0x5c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x5c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x5c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x5c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x5c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_MspInit+0x60>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_MspInit+0x60>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <HAL_I2C_MspInit+0x90>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d132      	bne.n	80008fa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_I2C_MspInit+0x94>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <HAL_I2C_MspInit+0x94>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_I2C_MspInit+0x94>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <HAL_I2C_MspInit+0x98>)
 80008c2:	f000 fa83 	bl	8000dcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_I2C_MspInit+0x9c>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <HAL_I2C_MspInit+0x9c>)
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_I2C_MspInit+0x94>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_I2C_MspInit+0x94>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_I2C_MspInit+0x94>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40005400 	.word	0x40005400
 8000908:	40021000 	.word	0x40021000
 800090c:	40010c00 	.word	0x40010c00
 8000910:	40010000 	.word	0x40010000

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x70>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d123      	bne.n	800097c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_UART_MspInit+0x74>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_UART_MspInit+0x74>)
 800093a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093e:	61d3      	str	r3, [r2, #28]
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0x74>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_UART_MspInit+0x74>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <HAL_UART_MspInit+0x74>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_UART_MspInit+0x74>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000964:	230c      	movs	r3, #12
 8000966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_MspInit+0x78>)
 8000978:	f000 fa28 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <HardFault_Handler+0x4>

080009a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <BusFault_Handler+0x4>

080009ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8aa 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ec:	f000 fb60 	bl	80010b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <SystemInit+0x5c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <SystemInit+0x5c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <SystemInit+0x5c>)
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	4911      	ldr	r1, [pc, #68]	; (8000a50 <SystemInit+0x5c>)
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <SystemInit+0x60>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <SystemInit+0x5c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <SystemInit+0x5c>)
 8000a16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <SystemInit+0x5c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <SystemInit+0x5c>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SystemInit+0x5c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <SystemInit+0x5c>)
 8000a32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a36:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SystemInit+0x5c>)
 8000a3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SystemInit+0x64>)
 8000a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a46:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000
 8000a54:	f8ff0000 	.word	0xf8ff0000
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a5e:	e003      	b.n	8000a68 <LoopCopyDataInit>

08000a60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a66:	3104      	adds	r1, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a70:	d3f6      	bcc.n	8000a60 <CopyDataInit>
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a74:	e002      	b.n	8000a7c <LoopFillZerobss>

08000a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a78:	f842 3b04 	str.w	r3, [r2], #4

08000a7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a80:	d3f9      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a82:	f7ff ffb7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 f807 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff fd95 	bl	80005b8 <main>
  bx lr
 8000a8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a90:	08002b3c 	.word	0x08002b3c
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a98:	20000034 	.word	0x20000034
  ldr r2, =_sbss
 8000a9c:	20000034 	.word	0x20000034
  ldr r3, = _ebss
 8000aa0:	200000e8 	.word	0x200000e8

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x28>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f945 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fea4 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f95d 	bl	8000db2 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 f925 	bl	8000d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	20000030 	.word	0x20000030
 8000b30:	2000002c 	.word	0x2000002c

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_IncTick+0x20>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000030 	.word	0x20000030
 8000b54:	200000e4 	.word	0x200000e4

08000b58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <HAL_GetTick+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	200000e4 	.word	0x200000e4

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff fff0 	bl	8000b58 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_Delay+0x40>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffe0 	bl	8000b58 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000030 	.word	0x20000030

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <__NVIC_EnableIRQ+0x34>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d28:	f7ff ff90 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff2d 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff42 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff90 	bl	8000ca0 <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5f 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff35 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa2 	bl	8000d04 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e127      	b.n	8001030 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de0:	2201      	movs	r2, #1
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8116 	bne.w	800102a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d034      	beq.n	8000e70 <HAL_GPIO_Init+0xa4>
 8000e06:	2b12      	cmp	r3, #18
 8000e08:	d80d      	bhi.n	8000e26 <HAL_GPIO_Init+0x5a>
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d02b      	beq.n	8000e66 <HAL_GPIO_Init+0x9a>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d804      	bhi.n	8000e1c <HAL_GPIO_Init+0x50>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d031      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d01c      	beq.n	8000e54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1a:	e048      	b.n	8000eae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d043      	beq.n	8000ea8 <HAL_GPIO_Init+0xdc>
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d01b      	beq.n	8000e5c <HAL_GPIO_Init+0x90>
          break;
 8000e24:	e043      	b.n	8000eae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e26:	4a89      	ldr	r2, [pc, #548]	; (800104c <HAL_GPIO_Init+0x280>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d026      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e2c:	4a87      	ldr	r2, [pc, #540]	; (800104c <HAL_GPIO_Init+0x280>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d806      	bhi.n	8000e40 <HAL_GPIO_Init+0x74>
 8000e32:	4a87      	ldr	r2, [pc, #540]	; (8001050 <HAL_GPIO_Init+0x284>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d020      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e38:	4a86      	ldr	r2, [pc, #536]	; (8001054 <HAL_GPIO_Init+0x288>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01d      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
          break;
 8000e3e:	e036      	b.n	8000eae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e40:	4a85      	ldr	r2, [pc, #532]	; (8001058 <HAL_GPIO_Init+0x28c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e46:	4a85      	ldr	r2, [pc, #532]	; (800105c <HAL_GPIO_Init+0x290>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d016      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e4c:	4a84      	ldr	r2, [pc, #528]	; (8001060 <HAL_GPIO_Init+0x294>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
          break;
 8000e52:	e02c      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e028      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e023      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e01e      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	330c      	adds	r3, #12
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e019      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e82:	2304      	movs	r3, #4
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e012      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	611a      	str	r2, [r3, #16]
          break;
 8000e9a:	e008      	b.n	8000eae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	615a      	str	r2, [r3, #20]
          break;
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	d801      	bhi.n	8000eb8 <HAL_GPIO_Init+0xec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	e001      	b.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d802      	bhi.n	8000eca <HAL_GPIO_Init+0xfe>
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x104>
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	6a39      	ldr	r1, [r7, #32]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	431a      	orrs	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8096 	beq.w	800102a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <HAL_GPIO_Init+0x298>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a58      	ldr	r2, [pc, #352]	; (8001064 <HAL_GPIO_Init+0x298>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b56      	ldr	r3, [pc, #344]	; (8001064 <HAL_GPIO_Init+0x298>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f16:	4a54      	ldr	r2, [pc, #336]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x19e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x2a4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x19a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_GPIO_Init+0x2a8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x196>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2ac>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x192>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7c:	493a      	ldr	r1, [pc, #232]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4938      	ldr	r1, [pc, #224]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4933      	ldr	r1, [pc, #204]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	492e      	ldr	r1, [pc, #184]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4929      	ldr	r1, [pc, #164]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	4924      	ldr	r1, [pc, #144]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	608b      	str	r3, [r1, #8]
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	491f      	ldr	r1, [pc, #124]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	491a      	ldr	r1, [pc, #104]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_GPIO_Init+0x2b0>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	43db      	mvns	r3, r3
 8001024:	4915      	ldr	r1, [pc, #84]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8001026:	4013      	ands	r3, r2
 8001028:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f47f aed0 	bne.w	8000de0 <HAL_GPIO_Init+0x14>
  }
}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	; 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	10210000 	.word	0x10210000
 8001050:	10110000 	.word	0x10110000
 8001054:	10120000 	.word	0x10120000
 8001058:	10310000 	.word	0x10310000
 800105c:	10320000 	.word	0x10320000
 8001060:	10220000 	.word	0x10220000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	611a      	str	r2, [r3, #16]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f806 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e10f      	b.n	8001326 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fbaa 	bl	8000874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2224      	movs	r2, #36	; 0x24
 8001124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001138:	f001 fb40 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 800113c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a7b      	ldr	r2, [pc, #492]	; (8001330 <HAL_I2C_Init+0x23c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d807      	bhi.n	8001158 <HAL_I2C_Init+0x64>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <HAL_I2C_Init+0x240>)
 800114c:	4293      	cmp	r3, r2
 800114e:	bf94      	ite	ls
 8001150:	2301      	movls	r3, #1
 8001152:	2300      	movhi	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	e006      	b.n	8001166 <HAL_I2C_Init+0x72>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <HAL_I2C_Init+0x244>)
 800115c:	4293      	cmp	r3, r2
 800115e:	bf94      	ite	ls
 8001160:	2301      	movls	r3, #1
 8001162:	2300      	movhi	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e0db      	b.n	8001326 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4a72      	ldr	r2, [pc, #456]	; (800133c <HAL_I2C_Init+0x248>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9b      	lsrs	r3, r3, #18
 8001178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a64      	ldr	r2, [pc, #400]	; (8001330 <HAL_I2C_Init+0x23c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d802      	bhi.n	80011a8 <HAL_I2C_Init+0xb4>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	e009      	b.n	80011bc <HAL_I2C_Init+0xc8>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a63      	ldr	r2, [pc, #396]	; (8001340 <HAL_I2C_Init+0x24c>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	099b      	lsrs	r3, r3, #6
 80011ba:	3301      	adds	r3, #1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4956      	ldr	r1, [pc, #344]	; (8001330 <HAL_I2C_Init+0x23c>)
 80011d8:	428b      	cmp	r3, r1
 80011da:	d80d      	bhi.n	80011f8 <HAL_I2C_Init+0x104>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e59      	subs	r1, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	bf38      	it	cc
 80011f4:	2304      	movcc	r3, #4
 80011f6:	e04f      	b.n	8001298 <HAL_I2C_Init+0x1a4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_I2C_Init+0x130>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	440b      	add	r3, r1
 800120e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e012      	b.n	800124a <HAL_I2C_Init+0x156>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	0099      	lsls	r1, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	fbb0 f3f3 	udiv	r3, r0, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Init+0x15e>
 800124e:	2301      	movs	r3, #1
 8001250:	e022      	b.n	8001298 <HAL_I2C_Init+0x1a4>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10e      	bne.n	8001278 <HAL_I2C_Init+0x184>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1e58      	subs	r0, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	440b      	add	r3, r1
 8001268:	fbb0 f3f3 	udiv	r3, r0, r3
 800126c:	3301      	adds	r3, #1
 800126e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001276:	e00f      	b.n	8001298 <HAL_I2C_Init+0x1a4>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	0099      	lsls	r1, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	fbb0 f3f3 	udiv	r3, r0, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	6809      	ldr	r1, [r1, #0]
 800129c:	4313      	orrs	r3, r2
 800129e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69da      	ldr	r2, [r3, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6911      	ldr	r1, [r2, #16]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68d2      	ldr	r2, [r2, #12]
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	430b      	orrs	r3, r1
 80012da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	000186a0 	.word	0x000186a0
 8001334:	001e847f 	.word	0x001e847f
 8001338:	003d08ff 	.word	0x003d08ff
 800133c:	431bde83 	.word	0x431bde83
 8001340:	10624dd3 	.word	0x10624dd3

08001344 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800135e:	f7ff fbfb 	bl	8000b58 <HAL_GetTick>
 8001362:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b20      	cmp	r3, #32
 800136e:	f040 80d9 	bne.w	8001524 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2319      	movs	r3, #25
 8001378:	2201      	movs	r2, #1
 800137a:	496d      	ldr	r1, [pc, #436]	; (8001530 <HAL_I2C_Mem_Write+0x1ec>)
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fc6b 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001388:	2302      	movs	r3, #2
 800138a:	e0cc      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_I2C_Mem_Write+0x56>
 8001396:	2302      	movs	r3, #2
 8001398:	e0c5      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d007      	beq.n	80013c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2221      	movs	r2, #33	; 0x21
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a3a      	ldr	r2, [r7, #32]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <HAL_I2C_Mem_Write+0x1f0>)
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001402:	88f8      	ldrh	r0, [r7, #6]
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	8979      	ldrh	r1, [r7, #10]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4603      	mov	r3, r0
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fac6 	bl	80019a4 <I2C_RequestMemoryWrite>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d052      	beq.n	80014c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e081      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fcec 	bl	8001e04 <I2C_WaitOnTXEFlagUntilTimeout>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00d      	beq.n	800144e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2b04      	cmp	r3, #4
 8001438:	d107      	bne.n	800144a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06b      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d11b      	bne.n	80014c4 <HAL_I2C_Mem_Write+0x180>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d017      	beq.n	80014c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1aa      	bne.n	8001422 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fcd8 	bl	8001e86 <I2C_WaitOnBTFFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00d      	beq.n	80014f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d107      	bne.n	80014f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e016      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e000      	b.n	8001526 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001524:	2302      	movs	r3, #2
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00100002 	.word	0x00100002
 8001534:	ffff0000 	.word	0xffff0000

08001538 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	817b      	strh	r3, [r7, #10]
 800154a:	460b      	mov	r3, r1
 800154c:	813b      	strh	r3, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001552:	f7ff fb01 	bl	8000b58 <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b20      	cmp	r3, #32
 8001562:	f040 8218 	bne.w	8001996 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2319      	movs	r3, #25
 800156c:	2201      	movs	r2, #1
 800156e:	4981      	ldr	r1, [pc, #516]	; (8001774 <HAL_I2C_Mem_Read+0x23c>)
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fb71 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800157c:	2302      	movs	r3, #2
 800157e:	e20b      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_I2C_Mem_Read+0x56>
 800158a:	2302      	movs	r3, #2
 800158c:	e204      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d007      	beq.n	80015b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2222      	movs	r2, #34	; 0x22
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a61      	ldr	r2, [pc, #388]	; (8001778 <HAL_I2C_Mem_Read+0x240>)
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015f6:	88f8      	ldrh	r0, [r7, #6]
 80015f8:	893a      	ldrh	r2, [r7, #8]
 80015fa:	8979      	ldrh	r1, [r7, #10]
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4603      	mov	r3, r0
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fa56 	bl	8001ab8 <I2C_RequestMemoryRead>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1c0      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	2b00      	cmp	r3, #0
 800161c:	d113      	bne.n	8001646 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e194      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11d      	bne.n	800168a <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001684:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001686:	b662      	cpsie	i
 8001688:	e172      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	2b02      	cmp	r3, #2
 8001690:	d11d      	bne.n	80016ce <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016a2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016ca:	b662      	cpsie	i
 80016cc:	e150      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016f4:	e13c      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	f200 80f5 	bhi.w	80018ea <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	2b01      	cmp	r3, #1
 8001706:	d123      	bne.n	8001750 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fbfb 	bl	8001f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e13d      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800174e:	e10f      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001754:	2b02      	cmp	r3, #2
 8001756:	d150      	bne.n	80017fa <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	2200      	movs	r2, #0
 8001760:	4906      	ldr	r1, [pc, #24]	; (800177c <HAL_I2C_Mem_Read+0x244>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fa78 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e112      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
 8001772:	bf00      	nop
 8001774:	00100002 	.word	0x00100002
 8001778:	ffff0000 	.word	0xffff0000
 800177c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001790:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80017c4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017f8:	e0ba      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	2200      	movs	r2, #0
 8001802:	4967      	ldr	r1, [pc, #412]	; (80019a0 <HAL_I2C_Mem_Read+0x468>)
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 fa27 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0c1      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001822:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185e:	2200      	movs	r2, #0
 8001860:	494f      	ldr	r1, [pc, #316]	; (80019a0 <HAL_I2C_Mem_Read+0x468>)
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f9f8 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e092      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001880:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018b4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018e8:	e042      	b.n	8001970 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fb0a 	bl	8001f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e04c      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d118      	bne.n	8001970 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f aebe 	bne.w	80016f6 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	00010004 	.word	0x00010004

080019a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	460b      	mov	r3, r1
 80019b8:	813b      	strh	r3, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f93c 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e05f      	b.n	8001aaa <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ea:	897b      	ldrh	r3, [r7, #10]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	492d      	ldr	r1, [pc, #180]	; (8001ab4 <I2C_RequestMemoryWrite+0x110>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f980 	bl	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e04c      	b.n	8001aaa <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f9ea 	bl	8001e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00d      	beq.n	8001a52 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d107      	bne.n	8001a4e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e02b      	b.n	8001aaa <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	e021      	b.n	8001aa8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a64:	893b      	ldrh	r3, [r7, #8]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f9c4 	bl	8001e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d107      	bne.n	8001a9a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e005      	b.n	8001aaa <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	00010002 	.word	0x00010002

08001ab8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	817b      	strh	r3, [r7, #10]
 8001aca:	460b      	mov	r3, r1
 8001acc:	813b      	strh	r3, [r7, #8]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f8aa 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e09e      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	6a3a      	ldr	r2, [r7, #32]
 8001b22:	494c      	ldr	r1, [pc, #304]	; (8001c54 <I2C_RequestMemoryRead+0x19c>)
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f8ee 	bl	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e08b      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	6a39      	ldr	r1, [r7, #32]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f958 	bl	8001e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d107      	bne.n	8001b72 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06a      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	e021      	b.n	8001bcc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b88:	893b      	ldrh	r3, [r7, #8]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f932 	bl	8001e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d107      	bne.n	8001bbe <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e044      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc2:	893b      	ldrh	r3, [r7, #8]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	6a39      	ldr	r1, [r7, #32]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f917 	bl	8001e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d107      	bne.n	8001bf4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e029      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f81f 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e013      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c24:	897b      	ldrh	r3, [r7, #10]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	6a3a      	ldr	r2, [r7, #32]
 8001c38:	4906      	ldr	r1, [pc, #24]	; (8001c54 <I2C_RequestMemoryRead+0x19c>)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f863 	bl	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	00010002 	.word	0x00010002

08001c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c68:	e025      	b.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c70:	d021      	beq.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7fe ff71 	bl	8000b58 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d116      	bne.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f043 0220 	orr.w	r2, r3, #32
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e023      	b.n	8001cfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d10d      	bne.n	8001cdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	e00c      	b.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d0b6      	beq.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d14:	e051      	b.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d24:	d123      	bne.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f043 0204 	orr.w	r2, r3, #4
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e046      	b.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d74:	d021      	beq.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d76:	f7fe feef 	bl	8000b58 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d302      	bcc.n	8001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d116      	bne.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f043 0220 	orr.w	r2, r3, #32
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e020      	b.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10c      	bne.n	8001dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	e00b      	b.n	8001df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	43da      	mvns	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4013      	ands	r3, r2
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d18d      	bne.n	8001d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e10:	e02d      	b.n	8001e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f8ce 	bl	8001fb4 <I2C_IsAcknowledgeFailed>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e02d      	b.n	8001e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e28:	d021      	beq.n	8001e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2a:	f7fe fe95 	bl	8000b58 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d302      	bcc.n	8001e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d116      	bne.n	8001e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d1ca      	bne.n	8001e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e92:	e02d      	b.n	8001ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f88d 	bl	8001fb4 <I2C_IsAcknowledgeFailed>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e02d      	b.n	8001f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eaa:	d021      	beq.n	8001ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eac:	f7fe fe54 	bl	8000b58 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d302      	bcc.n	8001ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d1ca      	bne.n	8001e94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f14:	e042      	b.n	8001f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d119      	bne.n	8001f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0210 	mvn.w	r2, #16
 8001f2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e029      	b.n	8001fac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f58:	f7fe fdfe 	bl	8000b58 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d302      	bcc.n	8001f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e007      	b.n	8001fac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d1b5      	bne.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d11b      	bne.n	8002004 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e26c      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8087 	beq.w	800213e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002030:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b04      	cmp	r3, #4
 800203a:	d00c      	beq.n	8002056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800203c:	4b8f      	ldr	r3, [pc, #572]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d112      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
 8002048:	4b8c      	ldr	r3, [pc, #560]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d10b      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d06c      	beq.n	800213c <HAL_RCC_OscConfig+0x12c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d168      	bne.n	800213c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e246      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x76>
 8002078:	4b80      	ldr	r3, [pc, #512]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a7f      	ldr	r2, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e02e      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7a      	ldr	r2, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b78      	ldr	r3, [pc, #480]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a77      	ldr	r2, [pc, #476]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0xbc>
 80020b2:	4b72      	ldr	r3, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a71      	ldr	r2, [pc, #452]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a6e      	ldr	r2, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020cc:	4b6b      	ldr	r3, [pc, #428]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6a      	ldr	r2, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a67      	ldr	r2, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe fd34 	bl	8000b58 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7fe fd30 	bl	8000b58 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1fa      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe4>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fd20 	bl	8000b58 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7fe fd1c 	bl	8000b58 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1e6      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x10c>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x18c>
 8002162:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1ba      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4939      	ldr	r1, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e03a      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x270>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fcd5 	bl	8000b58 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7fe fcd1 	bl	8000b58 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e19b      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x270>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fcb4 	bl	8000b58 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7fe fcb0 	bl	8000b58 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e17a      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d03a      	beq.n	8002294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d019      	beq.n	800225a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe fc94 	bl	8000b58 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002234:	f7fe fc90 	bl	8000b58 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e15a      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f000 fada 	bl	800280c <RCC_Delay>
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe fc7a 	bl	8000b58 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002266:	e00f      	b.n	8002288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7fe fc76 	bl	8000b58 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d908      	bls.n	8002288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e140      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	42420000 	.word	0x42420000
 8002284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b9e      	ldr	r3, [pc, #632]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e9      	bne.n	8002268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80a6 	beq.w	80023ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b97      	ldr	r3, [pc, #604]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b94      	ldr	r3, [pc, #592]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a93      	ldr	r2, [pc, #588]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b91      	ldr	r3, [pc, #580]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b8e      	ldr	r3, [pc, #568]	; (8002508 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b8b      	ldr	r3, [pc, #556]	; (8002508 <HAL_RCC_OscConfig+0x4f8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a8a      	ldr	r2, [pc, #552]	; (8002508 <HAL_RCC_OscConfig+0x4f8>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fc37 	bl	8000b58 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe fc33 	bl	8000b58 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b64      	cmp	r3, #100	; 0x64
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0fd      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b81      	ldr	r3, [pc, #516]	; (8002508 <HAL_RCC_OscConfig+0x4f8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x312>
 8002314:	4b7b      	ldr	r3, [pc, #492]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a7a      	ldr	r2, [pc, #488]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e02d      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x334>
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b73      	ldr	r3, [pc, #460]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a72      	ldr	r2, [pc, #456]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	e01c      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x356>
 800234c:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a6c      	ldr	r2, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a69      	ldr	r2, [pc, #420]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002366:	4b67      	ldr	r3, [pc, #412]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a66      	ldr	r2, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a63      	ldr	r2, [pc, #396]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe fbe7 	bl	8000b58 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fbe3 	bl	8000b58 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0ab      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ee      	beq.n	800238e <HAL_RCC_OscConfig+0x37e>
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fbd1 	bl	8000b58 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fbcd 	bl	8000b58 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e095      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a47      	ldr	r2, [pc, #284]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8081 	beq.w	80024fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d061      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d146      	bne.n	800249a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCC_OscConfig+0x4fc>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fba1 	bl	8000b58 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fb9d 	bl	8000b58 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e067      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242c:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	492d      	ldr	r1, [pc, #180]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a19      	ldr	r1, [r3, #32]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	430b      	orrs	r3, r1
 8002466:	4927      	ldr	r1, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x4fc>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fb71 	bl	8000b58 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fb6d 	bl	8000b58 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e037      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x46a>
 8002498:	e02f      	b.n	80024fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_RCC_OscConfig+0x4fc>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fb5a 	bl	8000b58 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fb56 	bl	8000b58 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e020      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x498>
 80024c6:	e018      	b.n	80024fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e013      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	42420060 	.word	0x42420060

08002510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0d0      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d910      	bls.n	8002554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	4965      	ldr	r1, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002576:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800258e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d040      	beq.n	8002630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d115      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e073      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06b      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4936      	ldr	r1, [pc, #216]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002600:	f7fe faaa 	bl	8000b58 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe faa6 	bl	8000b58 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e053      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d210      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4922      	ldr	r1, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4601      	mov	r1, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	fa21 f303 	lsr.w	r3, r1, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1cc>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1d0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fa08 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08002b1c 	.word	0x08002b1c
 80026dc:	20000028 	.word	0x20000028
 80026e0:	2000002c 	.word	0x2000002c

080026e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	b490      	push	{r4, r7}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ea:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026ec:	1d3c      	adds	r4, r7, #4
 80026ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 800271e:	2b08      	cmp	r3, #8
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x46>
 8002722:	e02d      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002726:	623b      	str	r3, [r7, #32]
      break;
 8002728:	e02d      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	0c9b      	lsrs	r3, r3, #18
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002736:	4413      	add	r3, r2
 8002738:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800273c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCC_GetSysClockFreq+0xb8>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0c5b      	lsrs	r3, r3, #17
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002756:	4413      	add	r3, r2
 8002758:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800275c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002762:	fb02 f203 	mul.w	r2, r2, r3
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	e004      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	623b      	str	r3, [r7, #32]
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002782:	623b      	str	r3, [r7, #32]
      break;
 8002784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002786:	6a3b      	ldr	r3, [r7, #32]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc90      	pop	{r4, r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	08002b08 	.word	0x08002b08
 8002798:	08002b18 	.word	0x08002b18
 800279c:	40021000 	.word	0x40021000
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	003d0900 	.word	0x003d0900

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000028 	.word	0x20000028

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c0:	f7ff fff2 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c4:	4601      	mov	r1, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08002b2c 	.word	0x08002b2c

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027ec:	4601      	mov	r1, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4a03      	ldr	r2, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08002b2c 	.word	0x08002b2c

0800280c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <RCC_Delay+0x34>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <RCC_Delay+0x38>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a5b      	lsrs	r3, r3, #9
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002828:	bf00      	nop
  }
  while (Delay --);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	60fa      	str	r2, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f9      	bne.n	8002828 <RCC_Delay+0x1c>
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000028 	.word	0x20000028
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e03f      	b.n	80028da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe f850 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f829 	bl	80028e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800291e:	f023 030c 	bic.w	r3, r3, #12
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	430b      	orrs	r3, r1
 800292a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <UART_SetConfig+0x1ac>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d14e      	bne.n	80029ea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800294c:	f7ff ff4a 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8002950:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <UART_SetConfig+0x1b0>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	0119      	lsls	r1, r3, #4
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009a      	lsls	r2, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fbb2 f2f3 	udiv	r2, r2, r3
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <UART_SetConfig+0x1b0>)
 800298a:	fba3 0302 	umull	r0, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <UART_SetConfig+0x1b0>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	4419      	add	r1, r3
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c0:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <UART_SetConfig+0x1b0>)
 80029c2:	fba3 0302 	umull	r0, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2064      	movs	r0, #100	; 0x64
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	; 0x32
 80029d4:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <UART_SetConfig+0x1b0>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	440a      	add	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80029e8:	e04d      	b.n	8002a86 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff fee7 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80029ee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009a      	lsls	r2, r3, #2
 80029fa:	441a      	add	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <UART_SetConfig+0x1b0>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	0119      	lsls	r1, r3, #4
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009a      	lsls	r2, r3, #2
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <UART_SetConfig+0x1b0>)
 8002a28:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	2064      	movs	r0, #100	; 0x64
 8002a30:	fb00 f303 	mul.w	r3, r0, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	3332      	adds	r3, #50	; 0x32
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <UART_SetConfig+0x1b0>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	4419      	add	r1, r3
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009a      	lsls	r2, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <UART_SetConfig+0x1b0>)
 8002a60:	fba3 0302 	umull	r0, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2064      	movs	r0, #100	; 0x64
 8002a68:	fb00 f303 	mul.w	r3, r0, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <UART_SetConfig+0x1b0>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	440a      	add	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40013800 	.word	0x40013800
 8002a94:	51eb851f 	.word	0x51eb851f

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2500      	movs	r5, #0
 8002a9c:	4e0c      	ldr	r6, [pc, #48]	; (8002ad0 <__libc_init_array+0x38>)
 8002a9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <__libc_init_array+0x3c>)
 8002aa0:	1ba4      	subs	r4, r4, r6
 8002aa2:	10a4      	asrs	r4, r4, #2
 8002aa4:	42a5      	cmp	r5, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	f000 f822 	bl	8002af0 <_init>
 8002aac:	2500      	movs	r5, #0
 8002aae:	4e0a      	ldr	r6, [pc, #40]	; (8002ad8 <__libc_init_array+0x40>)
 8002ab0:	4c0a      	ldr	r4, [pc, #40]	; (8002adc <__libc_init_array+0x44>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	42a5      	cmp	r5, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac0:	4798      	blx	r3
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aca:	4798      	blx	r3
 8002acc:	3501      	adds	r5, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002b34 	.word	0x08002b34
 8002ad4:	08002b34 	.word	0x08002b34
 8002ad8:	08002b34 	.word	0x08002b34
 8002adc:	08002b38 	.word	0x08002b38

08002ae0 <memset>:
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4402      	add	r2, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
